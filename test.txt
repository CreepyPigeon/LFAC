struct MyType{
    int x;
    int y;
};

int gfun(int z, float f, string s)
{
    int ix;
    return ix;
}

float ff(int x){
    float ret;
    return 5.4;
}

bool check(){
    bool result := 5 > 4;
    return result;
}

MyType mObj;
int ix;
int giy1;
int giy2;
float gf := 10.4;
string gs;
char gc;
bool gb;
array[int;100] gv;


begin
    gc:='c';
    gs:="Hello there";
    TypeOf(gc);
    gb:=false;
    giy1:=5;
    giy2:=100+giy1;
    Eval(gc);
    int i;
    int ia:=1;
    for(i:=0;i<5;i+1){
        ia:=ia*2;
    }
    while(false){
        ia:=ia/2;
    }
    Eval(gfun(10,10.5,gs));
    Eval(check());
    # gb:=(check()==true)&&(giy1+gfun(10,10.5,gs)>giy2);
    Eval(gb);
    # Eval((giy1==5)||f);
    mObj.x := 100;
    gv[5] := 10;

    # 
    #TypeOf(giy1);
    #TypeOf(gfun(10,10.5,gs));
    #TypeOf(mObj.x);
    #TypeOf(gv[10]);
    #giy1:=giy1+gfun(1,10.5,gs)+mObj.x-gv[10];
    
    # STD::BAD_ALLOC
    # gfun(gfun(1,10.5,gs),10.5, gs);
    TypeOf(giy1+5);
    TypeOf(gs);
    
    # ERORI
    # funct();
    # gfun(1,2.5,gc);
    # gfun(1,1.3);
    # int i;
    # ia:=ib;
    int mix;
    # mix:= gb + check();
    # mix := ff(10);
    # bool mb := gb + check();
    # gs := gfun(1,3.5,gs);
    # TypeOf(mix+ff(5));
end
